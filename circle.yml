version: 2.0
jobs:
  npm-build:
    docker:
      - image: circleci/node:8
    working_directory: ~/redash
    steps:
      - checkout
      - restore_cache:
         keys:
           - node-modules-
      - run:
          name: Setup NPM Environment
          command: |
            npm install
      - run:
          name: build
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - ./*
      - save_cache:
         key: node-modules-
         paths:
           - node_modules
  unit-tests:
    machine: true
    working_directory: ~/redash
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            set -x
            pip install --upgrade pip
            pip install docker-compose>=1.18
            docker-compose --version
      - run:
          name: Pull images and setup
          command: |
            set -x
            docker-compose up -d
            sleep 10
            docker-compose run --rm postgres psql -h postgres -U postgres -c "create database tests;"
      - run:
          name: Run tests
          command: docker-compose run --user root server tests
      - store_artifacts:
          path: junit.xml
      - store_artifacts:
          path: coverage.xml
  integration-tests:
    working_directory: ~/redash
    machine: true
    environment:
      REDASH_SERVER_URL : "http://127.0.0.1:5000/"
      DOCKER_IMAGE: mozilla/redash-ui-tests
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install Docker Compose
          command: |
            set -x
            pip install --upgrade pip
            pip install docker-compose>=1.18
            docker-compose --version
      - run:
          name: Pull redash images
          command: |
            set -x
            docker-compose -f docker-compose.yml up --no-start
            sleep 10
      - run:
          name: Pull redash-ui-tests
          command: docker pull "${DOCKER_IMAGE}":latest
      - run:
          name: Setup redash instance
          command: |
            set -x
            docker-compose run --rm --user root server create_db
            docker-compose run --rm postgres psql -h postgres -U postgres -c "create database tests"
            docker-compose run --rm --user root server /app/manage.py users create_root root@example.com "rootuser" --password "IAMROOT" --org default
            docker-compose run --rm --user root server /app/manage.py ds new "ui-tests" --type "url" --options '{"title": "uitests"}'
            docker-compose run -d -p 5000:5000 --user root server
            docker-compose start postgres
      - run:
          name: Run tests
          command: |
            set -x
            docker run --net="host" --env REDASH_SERVER_URL="${REDASH_SERVER_URL}" "${DOCKER_IMAGE}"
      - store_artifacts:
          path: report.html
  build-tarball: # build for master or release branches
    docker:
      - image: circleci/node:8
    environment:
      NAME: redash
      VERSION: $(python ./manage.py version)
      FULL_VERSION: $VERSION+b$CIRCLE_BUILD_NUM
      FILENAME: $NAME.$FULL_VERSION.tar.gz
    working_directory: ~/redash
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Pack Tarball
          command: bin/pack "$CIRCLE_BRANCH"
      - store_artifacts:
          path: $NAME.$FULL_VERSION.tar.gz
  build-docker-image: # build for tags
    docker:
      - image: circleci/node:8
    working_directory: ~/redash
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Tag deploy
          command: |
            set -x
            docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
            docker build -t redash/redash:$(./manage.py version | sed -e "s/\+/./") .
            docker push redash/redash:$(./manage.py version | sed -e "s/\+/./")
workflows:
  version: 2
  integration_tests:
    jobs:
      - integration-tests:
          filters:
             branches:
               only: master
  build:
    jobs:
      - npm-build
      - unit-tests:
          requires:
            - npm-build
      - build-tarball:
           requires:
             - unit-tests
           filters:
             tags:
               only: /v[0-9]+(\.[0-9\-a-z]+)*/
             branches:
               only:
                 - master
                 - release
      - build-docker-image:
           requires:
             - unit-tests
           filters:
             tags:
               only: /v[0-9]+(\.[0-9\-a-z]+)*/
             branches:
               only:
                 - master
                 - release
